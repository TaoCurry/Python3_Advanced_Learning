                                                   Python 3中str/bytes的区别
link:<https://eli.thegreenplace.net/2012/01/30/the-bytesstr-dichotomy-in-python-3/>

Python 3最重要的新特性大概要算是对文本和二进制数据作了更为清晰的区分。
文本总是Unicode，由str类型表示，二进制数据则由bytes类型表示。
Python 3不会以任意隐式的方式混用str和bytes，正是这使得两者的区分特别清晰。你不能拼接字符串和字节包，也无法在字节包里搜索字符串（反之亦然），也不能将字符串传入参数为字节包的函数（反之亦然）。

字符串可以编码成字节包，而字节包可以解码成字符串。

# example
>>> '&'.encode('utf-8')   # unicode -> bytes 文本字符串编码成字节包
b'&'
>>> b'&'.decode('utf-8')  # bytes -> unicode 字节包解码成文本字符串
'&'

字符串是文本的抽象表示。字符串由字符组成，字符则是与任何特定二进制表示无关的抽象实体。在操作字符串时，我们并不关心它们内部是怎么表示的。字符串里的每个字符要用几个字节保存。只有在将字符串编码成字节包（例如，为了在信道上发送它们）或从字节包解码字符串（反向操作）时，我们才会开始关注这点。

传入encode和decode的参数是编码（或codec）。编码是一种用二进制数据表示抽象字符的方式（utf-8编码）。

编码是这个转换过程中至关重要的一部分。离了编码，bytes对象b'\xxx'只是一堆比特位而已。编码赋予其含义。
